// custom grid to use for this or other projects;

.row {
  max-width: $grid-width;
  // background-color: beige;
  margin: 0 auto;
  // margin top 0 and left and right auto means block element centered inside block element. a trick to center blocks
  // if enuf space then this or reduces. more fluidity here
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
    // applies to all except last child/element row
  }
  @include clearfix;
  // gives the float elements a height
  // include in parent class

  [class^="col-"] {
    // select all elements that starts with col-
    // [class*=""] selects all that contains ""
    // [class$=""] selects all that ends with ""
    // background-color: orange;
    float: left;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
    // calc is a specical function for getting measurments and also u can mix units (% with px and rem etc...).
    // also variables must be wrapped inside #{}

    // all child elements of row are floating so its height is collapsed and becomes zero/ to correct this u use clearfix

    // this is a repeating style so try using a mixin or.... attribute selector like [alt="logo"]{} this style is applied to all elelments with this alt attributer  }
  }
  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }
  .col-2-of-3 {
    width: calc(
      2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 *#{$gutter-horizontal}
    );
  }
}
